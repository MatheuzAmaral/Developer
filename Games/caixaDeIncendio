<!DOCTYPE html><html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Inventário de Caixas de Incêndio</title>
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      background: #f4f4f4;
    }
    header {
      background: #b71c1c;
      color: white;
      padding: 1rem;
      text-align: center;
    }
    .controls {
      padding: 1rem;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
    }
    select, input[type="text"], button {
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1rem;
    }
    .filter-group {
      display: flex;
      gap: 5px;
      align-items: center;
      background: #e0e0e0;
      padding: 8px;
      border-radius: 5px;
    }
    .filter-group label {
      font-weight: bold;
      font-size: 0.9rem;
    }
    .inventory-item {
      background: white;
      margin: 10px;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .inventory-item h2 {
      margin-top: 0;
      color: #d32f2f;
    }
    .inventory-item p {
      margin: 5px 0;
    }
    .expired {
      border-left: 5px solid #f44336;
    }
    .warning {
      border-left: 5px solid #ff9800;
    }
    .expired-text {
      color: #f44336;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <header>
    <h1>Inventário de Caixas de Incêndio</h1>
  </header>
  
  <div class="controls">
    <input type="text" id="search" placeholder="Buscar por número, extintor, etc..." />
    
    <div class="filter-group">
      <label>Extintores:</label>
      <select id="filter-ext-month">
        <option value="">Mês</option>
      </select>
      <select id="filter-ext-year">
        <option value="">Ano</option>
      </select>
      <button onclick="filterByExtinguisherDate()">Filtrar</button>
    </div>
    
    <div class="filter-group">
      <label>Mangueiras:</label>
      <select id="filter-hose-month">
        <option value="">Mês</option>
      </select>
      <select id="filter-hose-year">
        <option value="">Ano</option>
      </select>
      <button onclick="filterByHoseDate()">Filtrar</button>
    </div>
    
    <button onclick="clearFilters()">Limpar Filtros</button>
    <button onclick="addNewBox()">Nova Caixa</button>
    <button onclick="exportCSV()">Exportar CSV</button>
  </div>
  
  <main id="inventory-list"></main>

  <script>
    let inventory = JSON.parse(localStorage.getItem('inventory')) || [
      {
        numero: "Cx 1",
        status: "ok",
        extintores: ["ABC 02871 (03/25)", "CO2 18140 (03/25)"],
        mangueiras: ["07/25", "08/25"],
        observacao: "Esguicho rígido, chave ok."
      },
      {
        numero: "Cx 2",
        status: "ok",
        extintores: ["ABC 06046 (03/25)"],
        mangueiras: ["07/25", "08/25"],
        observacao: "Placas não precisam ser trocadas."
      }
    ];

    const months = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    const years = ["23", "24", "25", "26", "27", "28"];

    function populateFilters() {
      // Preenche todos os selects de mês e ano
      const populateSelect = (id, values) => {
        const select = document.getElementById(id);
        select.innerHTML = id.includes('month') ? '<option value="">Mês</option>' : '<option value="">Ano</option>';
        values.forEach(v => select.innerHTML += `<option value="${v}">${v}</option>`);
      };
      
      populateSelect('filter-ext-month', months);
      populateSelect('filter-ext-year', years);
      populateSelect('filter-hose-month', months);
      populateSelect('filter-hose-year', years);
    }

    function filterByExtinguisherDate() {
      const month = document.getElementById("filter-ext-month").value;
      const year = document.getElementById("filter-ext-year").value;
      
      if (!month || !year) {
        alert("Selecione mês e ano para filtrar extintores");
        return;
      }
      
      const filtered = inventory.filter(item => {
        return item.extintores.some(ext => {
          // Procura datas no formato (MM/YY)
          const match = ext.match(/\((\d{2})\/(\d{2})\)/);
          if (!match) return false;
          const [_, extMonth, extYear] = match;
          return extMonth === month && extYear === year;
        });
      });
      
      renderFilteredList(filtered, `Extintores com vencimento em ${month}/${year}`);
    }

    function filterByHoseDate() {
      const month = document.getElementById("filter-hose-month").value;
      const year = document.getElementById("filter-hose-year").value;
      
      if (!month || !year) {
        alert("Selecione mês e ano para filtrar mangueiras");
        return;
      }
      
      const searchDate = `${month}/${year}`;
      const filtered = inventory.filter(item => {
        return item.mangueiras.some(man => man === searchDate);
      });
      
      renderFilteredList(filtered, `Mangueiras com vencimento em ${month}/${year}`);
    }

    function renderFilteredList(filteredItems, title) {
      const list = document.getElementById("inventory-list");
      list.innerHTML = "";
      
      if (filteredItems.length === 0) {
        list.innerHTML = `<p class="inventory-item">Nenhum item encontrado para ${title}.</p>`;
        return;
      }
      
      const currentDate = getCurrentDate();
      
      filteredItems.forEach(item => {
        const div = document.createElement("div");
        div.className = "inventory-item";
        
        // Destacar itens vencidos ou próximos do vencimento
        const hasExpired = checkExpiredItems(item, currentDate);
        if (hasExpired.expired) div.classList.add("expired");
        else if (hasExpired.warning) div.classList.add("warning");
        
        div.innerHTML = `
          <h2>${item.numero} - ${item.status}</h2>
          <p><strong>Extintores:</strong> ${formatItemsWithExpiry(item.extintores, currentDate, true)}</p>
          <p><strong>Mangueiras:</strong> ${formatItemsWithExpiry(item.mangueiras, currentDate, false)}</p>
          <p><strong>Observação:</strong> ${item.observacao}</p>
        `;
        list.appendChild(div);
      });
    }

    function formatItemsWithExpiry(items, currentDate, isExtinguisher) {
      return items.map(item => {
        let expiryDate, itemMonth, itemYear;
        
        if (isExtinguisher) {
          const match = item.match(/\((\d{2})\/(\d{2})\)/);
          if (!match) return item;
          [_, itemMonth, itemYear] = match;
          expiryDate = { month: itemMonth, year: itemYear };
        } else {
          [itemMonth, itemYear] = item.split('/');
          expiryDate = { month: itemMonth, year: itemYear };
        }
        
        if (isExpired(expiryDate.month, expiryDate.year, currentDate.month, currentDate.year)) {
          return `<span class="expired-text">${item}</span>`;
        } else if (isCloseToExpire(expiryDate.month, expiryDate.year, currentDate.month, currentDate.year)) {
          return `<span style="color: orange;">${item}</span>`;
        }
        return item;
      }).join(", ");
    }

    function checkExpiredItems(item, currentDate) {
      let result = { expired: false, warning: false };
      
      // Verificar extintores
      item.extintores.some(ext => {
        const match = ext.match(/\((\d{2})\/(\d{2})\)/);
        if (!match) return false;
        const [_, extMonth, extYear] = match;
        
        if (isExpired(extMonth, extYear, currentDate.month, currentDate.year)) {
          result.expired = true;
          return true;
        } else if (isCloseToExpire(extMonth, extYear, currentDate.month, currentDate.year)) {
          result.warning = true;
        }
      });
      
      // Se já encontrou item vencido, não precisa verificar os outros
      if (result.expired) return result;
      
      // Verificar mangueiras
      item.mangueiras.some(man => {
        const [manMonth, manYear] = man.split('/');
        
        if (isExpired(manMonth, manYear, currentDate.month, currentDate.year)) {
          result.expired = true;
          return true;
        } else if (isCloseToExpire(manMonth, manYear, currentDate.month, currentDate.year)) {
          result.warning = true;
        }
      });
      
      return result;
    }

    function getCurrentDate() {
      const now = new Date();
      return {
        month: String(now.getMonth() + 1).padStart(2, '0'),
        year: String(now.getFullYear()).slice(-2)
      };
    }

    function isExpired(itemMonth, itemYear, currentMonth, currentYear) {
      if (itemYear < currentYear) return true;
      if (itemYear == currentYear && itemMonth < currentMonth) return true;
      return false;
    }

    function isCloseToExpire(itemMonth, itemYear, currentMonth, currentYear) {
      if (itemYear < currentYear) return false;
      
      const itemDate = new Date(`20${itemYear}-${itemMonth}-01`);
      const currentDate = new Date(`20${currentYear}-${currentMonth}-01`);
      const diffMonths = (itemDate.getFullYear() - currentDate.getFullYear()) * 12 + (itemDate.getMonth() - currentDate.getMonth());
      
      return diffMonths <= 3 && diffMonths >= 0;
    }

    function renderInventory(filter = "") {
      const list = document.getElementById("inventory-list");
      list.innerHTML = "";

      const currentDate = getCurrentDate();

      inventory
        .filter(item => {
          const combined = `${item.numero} ${item.extintores.join(" ")} ${item.observacao}`.toLowerCase();
          return combined.includes(filter.toLowerCase());
        })
        .forEach(item => {
          const div = document.createElement("div");
          div.className = "inventory-item";
          
          const hasExpired = checkExpiredItems(item, currentDate);
          if (hasExpired.expired) div.classList.add("expired");
          else if (hasExpired.warning) div.classList.add("warning");
          
          div.innerHTML = `
            <h2>${item.numero} - ${item.status}</h2>
            <p><strong>Extintores:</strong> ${formatItemsWithExpiry(item.extintores, currentDate, true)}</p>
            <p><strong>Mangueiras:</strong> ${formatItemsWithExpiry(item.mangueiras, currentDate, false)}</p>
            <p><strong>Observação:</strong> ${item.observacao}</p>
          `;
          list.appendChild(div);
        });
    }

    document.getElementById("search").addEventListener("input", (e) => {
      renderInventory(e.target.value);
    });

    function clearFilters() {
      document.getElementById("search").value = "";
      document.getElementById("filter-ext-month").value = "";
      document.getElementById("filter-ext-year").value = "";
      document.getElementById("filter-hose-month").value = "";
      document.getElementById("filter-hose-year").value = "";
      renderInventory();
    }

    function addNewBox() {
      const numero = prompt("Número da nova caixa:");
      if (!numero) return;

      const status = prompt("Status da nova caixa:", "ok");
      const extintores = prompt("Extintores (separados por vírgula):", "ABC 12345 (01/25)").split(",").map(s => s.trim());
      const mangueiras = prompt("Mangueiras (separadas por vírgula):", "01/25, 02/25").split(",").map(s => s.trim());
      const observacao = prompt("Observações:", "");

      inventory.push({ numero, status, extintores, mangueiras, observacao });
      localStorage.setItem("inventory", JSON.stringify(inventory));
      renderInventory();
    }

    function exportCSV() {
      let csv = "Número,Status,Extintores,Mangueiras,Observação\n";
      inventory.forEach(item => {
        csv += `"${item.numero}","${item.status}","${item.extintores.join(" - ")}","${item.mangueiras.join(" - ")}","${item.observacao}"\n`;
      });
      const blob = new Blob([csv], { type: "text/csv" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "inventario_caixas.csv";
      link.click();
    }

    window.onload = () => {
      populateFilters();
      renderInventory();
    }
  </script>
</body>
</html>